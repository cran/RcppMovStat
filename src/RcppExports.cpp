// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// movCount
NumericVector movCount(NumericVector vec, int n, int ss, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movCount(SEXP vecSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movCount(vec, n, ss, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movCountr
NumericVector movCountr(NumericVector vec, int n, int ss, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movCountr(SEXP vecSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movCountr(vec, n, ss, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movCountUE
NumericMatrix movCountUE(NumericVector vec, NumericVector pos, int n, int ss, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movCountUE(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movCountUE(vec, pos, n, ss, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movCountUEr
NumericMatrix movCountUEr(NumericVector vec, NumericVector pos, int n, int ss, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movCountUEr(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movCountUEr(vec, pos, n, ss, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movEmean
NumericVector movEmean(NumericVector vec, int n, Nullable<double> smFac);
RcppExport SEXP _RcppMovStat_movEmean(SEXP vecSEXP, SEXP nSEXP, SEXP smFacSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type smFac(smFacSEXP);
    rcpp_result_gen = Rcpp::wrap(movEmean(vec, n, smFac));
    return rcpp_result_gen;
END_RCPP
}
// movMean
NumericVector movMean(NumericVector vec, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movMean(SEXP vecSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movMean(vec, n, ss, w, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movMeanr
NumericVector movMeanr(NumericVector vec, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movMeanr(SEXP vecSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movMeanr(vec, n, ss, w, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movMeanUE
NumericMatrix movMeanUE(NumericVector vec, NumericVector pos, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movMeanUE(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movMeanUE(vec, pos, n, ss, w, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movMeanUEr
NumericMatrix movMeanUEr(NumericVector vec, NumericVector pos, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movMeanUEr(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movMeanUEr(vec, pos, n, ss, w, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movQt
NumericVector movQt(NumericVector vec, int n, double prob, int ss, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movQt(SEXP vecSEXP, SEXP nSEXP, SEXP probSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movQt(vec, n, prob, ss, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movQtr
NumericVector movQtr(NumericVector vec, int n, double prob, int ss, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movQtr(SEXP vecSEXP, SEXP nSEXP, SEXP probSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movQtr(vec, n, prob, ss, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movQtUE
NumericMatrix movQtUE(NumericVector vec, NumericVector pos, int n, double prob, int ss, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movQtUE(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP probSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movQtUE(vec, pos, n, prob, ss, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movQtUEr
NumericMatrix movQtUEr(NumericVector vec, NumericVector pos, int n, double prob, int ss, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movQtUEr(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP probSEXP, SEXP ssSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movQtUEr(vec, pos, n, prob, ss, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movSum
NumericVector movSum(NumericVector vec, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movSum(SEXP vecSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movSum(vec, n, ss, w, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movSumr
NumericVector movSumr(NumericVector vec, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movSumr(SEXP vecSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movSumr(vec, n, ss, w, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}
// movSumUE
NumericMatrix movSumUE(NumericVector vec, NumericVector pos, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD, std::string align);
RcppExport SEXP _RcppMovStat_movSumUE(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    Rcpp::traits::input_parameter< std::string >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(movSumUE(vec, pos, n, ss, w, na_rm, sizeD, align));
    return rcpp_result_gen;
END_RCPP
}
// movSumUEr
NumericMatrix movSumUEr(NumericVector vec, NumericVector pos, int n, int ss, Nullable<NumericVector> w, bool na_rm, bool sizeD);
RcppExport SEXP _RcppMovStat_movSumUEr(SEXP vecSEXP, SEXP posSEXP, SEXP nSEXP, SEXP ssSEXP, SEXP wSEXP, SEXP na_rmSEXP, SEXP sizeDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type sizeD(sizeDSEXP);
    rcpp_result_gen = Rcpp::wrap(movSumUEr(vec, pos, n, ss, w, na_rm, sizeD));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppMovStat_movCount", (DL_FUNC) &_RcppMovStat_movCount, 6},
    {"_RcppMovStat_movCountr", (DL_FUNC) &_RcppMovStat_movCountr, 5},
    {"_RcppMovStat_movCountUE", (DL_FUNC) &_RcppMovStat_movCountUE, 7},
    {"_RcppMovStat_movCountUEr", (DL_FUNC) &_RcppMovStat_movCountUEr, 6},
    {"_RcppMovStat_movEmean", (DL_FUNC) &_RcppMovStat_movEmean, 3},
    {"_RcppMovStat_movMean", (DL_FUNC) &_RcppMovStat_movMean, 7},
    {"_RcppMovStat_movMeanr", (DL_FUNC) &_RcppMovStat_movMeanr, 6},
    {"_RcppMovStat_movMeanUE", (DL_FUNC) &_RcppMovStat_movMeanUE, 8},
    {"_RcppMovStat_movMeanUEr", (DL_FUNC) &_RcppMovStat_movMeanUEr, 7},
    {"_RcppMovStat_movQt", (DL_FUNC) &_RcppMovStat_movQt, 7},
    {"_RcppMovStat_movQtr", (DL_FUNC) &_RcppMovStat_movQtr, 6},
    {"_RcppMovStat_movQtUE", (DL_FUNC) &_RcppMovStat_movQtUE, 8},
    {"_RcppMovStat_movQtUEr", (DL_FUNC) &_RcppMovStat_movQtUEr, 7},
    {"_RcppMovStat_movSum", (DL_FUNC) &_RcppMovStat_movSum, 7},
    {"_RcppMovStat_movSumr", (DL_FUNC) &_RcppMovStat_movSumr, 6},
    {"_RcppMovStat_movSumUE", (DL_FUNC) &_RcppMovStat_movSumUE, 8},
    {"_RcppMovStat_movSumUEr", (DL_FUNC) &_RcppMovStat_movSumUEr, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppMovStat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
